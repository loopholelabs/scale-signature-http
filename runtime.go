//go:build !tinygo && !js && !wasm
// +build !tinygo,!js,!wasm

// Code generated by scale-signature-go v0.0.1, DO NOT EDIT.
// source: signature/example/signature.proto

package http

import (
	"bytes"
	_ "embed"
	"github.com/loopholelabs/polyglot-go"
	"github.com/loopholelabs/scale-signature"
)

var _ signature.Signature = (*Context)(nil)
var _ signature.RuntimeContext = (*RuntimeContext)(nil)

//go:embed signature.yaml
var embeddedSignatureFile []byte
var signatureFile *signature.Definition

type RuntimeContext Context

func init() {
	var err error
	signatureFile, err = signature.Decode(bytes.NewReader(embeddedSignatureFile))
	if err != nil {
		panic(err)
	}
}

// Context is a context object for an incoming request. It is meant to be used
// inside the Scale function.
type Context struct {
	generated *HttpContext
	buffer    *polyglot.Buffer
}

// New creates a new empty Context
func New() *Context {
	return &Context{
		generated: NewHttpContext(),
		buffer:    polyglot.NewBuffer(),
	}
}

// Version returns the version of the Context
func (x *Context) Version() string {
	return signatureFile.Version
}

// Name returns the name of the Context.
func (x *Context) Name() string {
	return signatureFile.Name
}

// RuntimeContext converts a Context into a RuntimeContext.
func (x *Context) RuntimeContext() signature.RuntimeContext {
	return (*RuntimeContext)(x)
}

// Read reads the context from the given byte slice and returns an error if one occurred
//
// This method is meant to be used by the Scale Runtime to deserialize the Context
func (x *RuntimeContext) Read(b []byte) error {
	return x.generated.internalDecode(b)
}

// Write writes the context into a byte slice and returns it
func (x *RuntimeContext) Write() []byte {
	x.buffer.Reset()
	x.generated.internalEncode(x.buffer)
	return x.buffer.Bytes()
}
