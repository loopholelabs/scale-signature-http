/*
  Copyright 2022 Loophole Labs

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

// Code generated by protoc-gen-ts-polyglot 0.2.0. DO NOT EDIT.
import { encodeString, decodeString, encodeInt64, decodeInt64, encodeUint8Array, decodeUint8Array, encodeMap, Kind, decodeMap} from "@loopholelabs/polyglot-ts";

import { StringList } from "./http.signature";

export class Request {
  constructor(Method: string, ContentLength: bigint, Protocol: string, IP: string, Body: Uint8Array, Headers: Map<string, StringList>) {
    this._Method = Method
    this._ContentLength = ContentLength
    this._Protocol = Protocol
    this._IP = IP
    this._Body = Body
    this._Headers = Headers
  }

  private _Method: string;

  get Method(): string {
    return this._Method
  }

  set Method(Method: string) {
    this._Method = Method
  }

  private _ContentLength: bigint;

  get ContentLength(): bigint {
    return this._ContentLength
  }

  set ContentLength(ContentLength: bigint) {
    this._ContentLength = ContentLength
  }

  private _Protocol: string;

  get Protocol(): string {
    return this._Protocol
  }

  set Protocol(Protocol: string) {
    this._Protocol = Protocol
  }

  private _IP: string;

  get IP(): string {
    return this._IP
  }

  set IP(IP: string) {
    this._IP = IP
  }

  private _Body: Uint8Array;

  get Body(): Uint8Array {
    return this._Body
  }

  set Body(Body: Uint8Array) {
    this._Body = Body
  }

  private _Headers: Map<string, StringList>;

  get Headers(): Map<string, StringList> {
    return this._Headers
  }

  set Headers(Headers: Map<string, StringList>) {
    this._Headers = Headers
  }

  encode(buf: Uint8Array): Uint8Array {
    let encoded = buf
    encoded = encodeString(encoded, this._Method)
    encoded = encodeInt64(encoded, this._ContentLength)
    encoded = encodeString(encoded, this._Protocol)
    encoded = encodeString(encoded, this._IP)
    encoded = encodeUint8Array(encoded, this._Body)
    encoded = encodeMap(encoded, this._Headers.size,
      Kind.String, Kind.Any)
    this._Headers.forEach((value, key) => {
      encoded = encodeString(encoded, key);
      encoded = value.encode(encoded);
    })
    return encoded
  }

  static decode(buf: Uint8Array): {
    buf: Uint8Array,
    value: Request
  } {
    let decoded = buf
    const Method = decodeString(decoded)
    decoded = Method.buf
    const ContentLength = decodeInt64(decoded)
    decoded = ContentLength.buf
    const Protocol = decodeString(decoded)
    decoded = Protocol.buf
    const IP = decodeString(decoded)
    decoded = IP.buf
    const Body = decodeUint8Array(decoded)
    decoded = Body.buf
    const HeadersMap = decodeMap(decoded)
    decoded = HeadersMap.buf
    const Headers: { value: Map<string, StringList> } = {
      value: new Map<string, StringList>(),
    }

    for (let i = 0; i < HeadersMap.size; i++) {
      const key = decodeString(decoded);
      decoded = key.buf;
      const value = StringList.decode(decoded);
      decoded = value.buf;
      Headers.value.set(key.value, value.value);
    }

    return {
      buf: decoded,
      value: new Request(Method.value, ContentLength.value, Protocol.value, IP.value, Body.value, Headers.value)
    }
  }
}
